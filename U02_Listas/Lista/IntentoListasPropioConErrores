#ifndef LISTA_H
#define LISTA_H

#include "Nodo.h"

/**
 * Clase que implementa una Lista Enlasada generica, ya que puede
 * almacenar cualquier tipo de dato T
 * @tparam T cualquier tipo de dato
 */
template<class T>
class Lista {

private:

    Nodo <T> * inicio;

public:
    Lista();

    Lista(const Lista<T> &li);

    ~Lista();

    bool esVacia();

    int getTamanio();

    void insertar(unsigned int pos, T dato);

    void insertarPrimero(T dato);

    void insertarUltimo(T dato);

    void remover(unsigned int pos);

    T getDato(int pos);

    void reemplazar(int pos, T dato);

    void vaciar();
};


/**
 * Constructor de la clase Lista
 * @tparam T
 */
template<class T>
Lista<T>::Lista() {
    inicio = nullptr;

}


/**
 * Constructor por copia de la clase Lista
 * @tparam T
 * @param li
 */
template<class T>
Lista<T>::Lista(const Lista<T> &li) {}


/**
 * Destructor de la clase Lista, se encarga de liberar la memoria de todos los nodos
 * utilizados en la lista
 * @tparam T
 */
template<class T>
Lista<T>::~Lista() {}


/**
 * Metodo para saber si la lista esta vacia
 * @tparam T
 * @return true si la lista esta vacia, sino false
 */
template<class T>
bool Lista<T>::esVacia() {return inicio == nullptr; }


/**
 * Metodo para obtener la cantidad de nodos de la lista
 * @tparam T
 * @return la cantidad de nodos de la lista
 */
template<class T>
int Lista<T>::getTamanio() {
    int cant = 0;
    Nodo<T> *aux = inicio;
    while ( aux != nullptr ) { //para que vaya nodo por nodo y pare en el que sea null

       cant ++;
       aux=aux->getNext();
    }

    return cant;

}


/**
 * Inserta un nodo con el dato en la posicion pos
 * @tparam T
 * @param pos lugar donde será insertado el dato
 * @param dato  dato a insertar
 */
template<class T>
void Lista<T>::insertar(unsigned int pos, T dato) {
    Nodo<T> * nuevo = new Nodo<T>(); //puedo poner auto * nuevo = new Nodo<T> () y esto me dice que la var nuevo va a ser de tipo nodo
    Nodo<T> *aux = inicio; //ahora quiero ver en q pos estoy;
     int pos_actual = 0;

    nuevo->setDato(dato);

     if (pos == 0){
         nuevo->setNext(inicio);
         inicio = nuevo;
         return;
     }

     while (pos_actual < pos-1 && aux != nullptr){ //para que vaya nodo por nodo y pare en el que yo tengo que conectar con el  nuevoo

         pos_actual ++;
         aux=aux->getNext();
     }

     if (aux == nullptr){ // hay problema si apunto al final de la lista porque estan en null
         throw 1;
     } else {

         nuevo->setNext(aux->getNext()); //no lo puedo hacer al reves pq sino apuntaria al mismo nuevo nodo
         aux->setNext(nuevo);
     }




}


/**
 * Inserta un nodo con el dato en la primera posicion
 * @tparam T
 * @param dato dato a insertar
 */
template<class T>
void Lista<T>::insertarPrimero(T dato) {
    auto *nuevo = new Nodo<T>();
    nuevo->setDato(dato);
    nuevo->setNext(inicio);
    inicio=nuevo;
}


/**
 * Inserta un nodo con el dato en la ultima posicion
 * @tparam T
 * @param dato dato a insertar
 */
template<class T>
void Lista<T>::insertarUltimo(T dato) {
    auto *nuevo= new Nodo<T> ();//creo nodo nuevo vacio
    Nodo<T> * aux = inicio;// igualo puntero
    int pos = 0;
    nuevo->setDato(dato);

    nuevo->setNext(nullptr);

    if (aux == nullptr){ //caso particular lista vacia
        inicio = nuevo;
        return;
    }

    while (aux->getNext() != nullptr){ //si no me puedo pasar de la lista y llegar al ulñtimo que es null
        aux = aux->getNext();      // si es una lista vacia aca esta el problema
    }

}


/**
 * Elimina el nodo en la posicion 'pos' de la lista enlasada
 * @tparam T
 * @param pos posicion del nodo a eliminar
 */
template<class T>
void Lista<T>::remover(unsigned int pos) {
    auto * aux = inicio;

    while (pos > 1 && aux != nullptr){
        pos --;
        aux->getNext();
    }
    //error no existe el nodo (me pase)
    if (aux = nullptr) //si esta vacio
        throw 1;


    if (pos == 0){ // si elimino el 1er nodo
        inicio = nullptr;
        delete aux;
    }else { //los otros casos

        auto * siguiente = aux->getNext();
        if (siguiente= nullptr) // caso particular en el que borro pos 1 y es un solo elemento
            throw 2;

   aux->setNext(siguiente->getNext());   //para que no pueda apuntar a un null pq osshhhtia se rompe con todo esto
   delete siguiente;

   //otra alternativa (CREO)
    //auto * siguiente = aux.getnext();
    //siguiente = siguiente.getnext();
    //aux.setnext(siguiente);     OJO QUE LOS PUNTOS SON FLECHITAS


    }


}


/**
 * Obtener el dato del nodo en la posicion pos
 * @tparam T
 * @param pos posicion del dato
 * @return dato almacenado en el nodo
 */
template<class T>
T Lista<T>::getDato(int pos) {
   auto *aux = inicio;

    while (pos > 0 && aux != nullptr) {
        pos--;
        aux = aux->getNext();
    }

    if (aux == nullptr)
        throw 1;

    return aux->getDato();



}


/**
 * Reemplaza el dato almacenado en un nodo por este otro
 * @tparam T
 * @param pos posicion donde se desea reemplazar
 * @param dato nuevo dato a almacenar
 */
template<class T>
void Lista<T>::reemplazar(int pos, T dato) {

    auto * aux = inicio;

    while (pos > 0 && aux != nullptr){
        pos --;
        aux->getNext();
    }

    if (aux = nullptr){
        throw 1;
    }

   aux->setDato(dato);

}


/**
 * Función que vacia la lista enlazada
 * @tparam T
 */
template<class T>
void Lista<T>::vaciar() {}


#endif //LISTA_H
